AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-
  AWS CloudFormation template for secretfree provisioning
Parameters:
  TemplateBucket:
    Default: elberger-secretfree-template
    Description: >-
      The S3 bucket into which the template, lambda functions, and Web
      content have been uploaded.
    Type: String
  SkuName:
    Default: widgiot
    Description: >-
      Usually the shortened product name, uniquely representing a
      product line. This is done to keep multiple product capabilities
      and certificate issuance separate from one another.
    Type: String
  AcmPcaCaArn:
    Default: put-your-arn-here
    Description: >-
      The CA Arn for ACM PCA CA.  Note that this value is not
      validated and is applied to the lambda function environment.
    Type: String

Outputs:
  ProvisioningTableArn:
    Description: >-
      The ARN for the provisioning DynamoDB table.
    Value: !GetAtt ProvisioningTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProvisioningTableArn"
  ProvisioningTableStream:
    Description: >-
      The Stream ARN for the provisioning DynamoDB table.
    Value: !GetAtt ProvisioningTable.StreamArn
    Export:
      Name: !Sub "${AWS::StackName}-ProvisioningTableStream"
  ProvisioningTableName:
    Description: >-
      The simple name for the provisioning DynamoDB table.
    Value: !Ref ProvisioningTable
    Export:
      Name: !Sub "${AWS::StackName}-ProvisioningTableName"

Resources:

  pyOpensslLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - 'python3.6'
        - 'python3.7'
      Content:
        S3Bucket: !Ref TemplateBucket
        S3Key: 'lambda-layer-pyopenssl.zip'
      Description: "OpenSSL library"
      LayerName: "PyOpenSSL"
      LicenseInfo: "MIT"

  PerSkuLambdaAuthorizer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${SkuName}-secretfree-authorizer
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key:    lambda-authorizer.zip
      Role: !GetAtt PerSkuLambdaAuthorizerExecutionRole.Arn
      Handler: main.lambda_handler
      Runtime: python3.6
      MemorySize: 1024
      Layers:
        - !Ref pyOpensslLayer
      Environment:
        Variables:
          SECRETFREE_TABLENAME: !Ref SkuName

  PerSkuLambdaAuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PerSkuLambdaAuthorizer.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProvisioningRestApi}/*/POST/new

  PerSkuLambdaAuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${SkuName}-secretfree-authorizer-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${SkuName}-secretfree-authorizer-logger
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              -
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SkuName}-${AWS::StackName}:*

  PerSkuLambdaProvisioningACMPCA:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${SkuName}-secretfree-acmpca
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key:    lambda-issuer-acmpca.zip
      Role: !GetAtt PerSkuLambdaAuthorizerExecutionRole.Arn
      Handler: main.lambda_handler
      Runtime: python3.6
      MemorySize: 1024
      Layers:
        - !Ref pyOpensslLayer
      Environment:
        Variables:
          ACMPCA_CA_ARN: !Ref AcmPcaCaArn
          SECRETFREE_TABLENAME: !Ref ProvisioningTable

  PerSkuLambdaProvisioningACMPCAIotCore:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${SkuName}-secretfree-iotcore
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key:    lambda-issuer-iotcore.zip
      Role: !GetAtt PerSkuLambdaAuthorizerExecutionRole.Arn
      Handler: main.lambda_handler
      Runtime: python3.6
      MemorySize: 1024
      Layers:
        - !Ref pyOpensslLayer
      Environment:
        Variables:
          ACMPCA_CA_ARN: !Ref AcmPcaCaArn
          SECRETFREE_TABLENAME: !Ref ProvisioningTable

  ProvisioningTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        -
          AttributeName: "device-id"
          AttributeType: "S"
        -
          AttributeName: "pubkey"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - 
          AttributeName: "device-id"
          KeyType: "HASH"
        -
          AttributeName: "pubkey"
          KeyType: "RANGE"
      TableName: !Sub "${SkuName}-iot-provisioning-secretfree"
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ProvisioningRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${SkuName}-IoTProvisioning"
      Description: >-
        !Sub "This API enables certificate provisioning for the ${SkuName} product line."
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProvisioningResourceAuthorizer:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProvisioningRestApi
      ParentId: !GetAtt ProvisioningRestApi.RootResourceId
      PathPart: authorizer

  ProvisioningMethodAuthorizerAny:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ProvisioningRestApi
      ResourceId: !Ref ProvisioningResourceAuthorizer
      ApiKeyRequired: False
      AuthorizationType: AWS_IAM
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ':'
          - - arn
            - aws
            - apigateway
            - !Ref AWS::Region
            - lambda
            - path/2015-03-31/functions/arn
            - aws
            - lambda
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - function
            - !Sub ${SkuName}-provisioning-authorizer-${AWS::StackName}/invocations
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ".*"
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { }
    
  ProvisioningResourceNew:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProvisioningRestApi
      ParentId:  !GetAtt ProvisioningRestApi.RootResourceId
      PathPart: new

  ProvisioningMethodOutputModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ProvisioningRestApi
      Name: NewCertificateOutputModel
      Description: >-
        This model describes the output payload for requesting a new certificate
      ContentType: application/json
      Schema: >-
        {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "NewCertificateOutputModel",
        "type": "object",
        "properties": {
          "Certificate": { "type": "string" },
          "CertificateChain": { "type": "string" }
         }}

  ProvisioningMethodNewPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ProvisioningRestApi
      ResourceId: !Ref ProvisioningResourceNew
      ApiKeyRequired: False
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ProvisioningAuthorizer
      HttpMethod: POST
      RequestParameters: { "method.request.header.device-csr": true }
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ':'
          - - arn
            - aws
            - apigateway
            - !Ref AWS::Region
            - lambda
            - path/2015-03-31/functions/arn
            - aws
            - lambda
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - function
            - !Sub ${SkuName}-provisioning-acmpca-${AWS::StackName}/invocations
        RequestTemplates:
          application/json: >-
            {
            "method" : "$context.httpMethod",
            "body"   : $input.json('$'),
            "headers": {
              #foreach($param in $input.params().header.keySet())
              "$param" : "$util.escapeJavaScript($input.params().header.get($param))"
                  #if($foreach.hasNext),#end
              #end
            }
            }
        RequestParameters: { "integration.request.header.device-csr": "method.request.header.device-csr" }
        PassthroughBehavior: WHEN_NO_TEMPLATES
        ContentHandling: CONVERT_TO_TEXT
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: { "application/json" : "$input.json('$.body')" }
      MethodResponses:
        - StatusCode: 200
          ResponseModels: { "application/json" : "NewCertificateOutputModel" }

  ProvisioningAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Join
        - ':' 
        - - arn
          - aws
          - apigateway
          - !Ref AWS::Region
          - lambda
          - path/2015-03-31/functions/arn
          - aws
          - lambda
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - function
          - !Sub ${SkuName}-authorizer-${AWS::StackName}/invocations
      Type: REQUEST
      IdentitySource: method.request.header.device-csr
      Name: CsrAuthorizer
      RestApiId: !Ref ProvisioningRestApi

  ProvisioningDeploymentTest:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProvisioningResourceNew
      - ProvisioningMethodNewPost
    Properties:
      StageName: Test
      RestApiId: !Ref ProvisioningRestApi
        
